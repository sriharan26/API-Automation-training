{
	"info": {
		"_postman_id": "6079c0e7-8674-4fe3-80b5-4b8e31ff9769",
		"name": "PRO 2 VARIABLES",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "35070981"
	},
	"item": [
		{
			"name": "POSITIVE TC-COLLECTION VARIABLES",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"// CAPTURING RESPONSE ATTRIBUTES \r",
									"\r",
									"console.log(\"The response code is \"+pm.response.code);\r",
									"console.log(\"The response message is \"+pm.response.status);\r",
									"console.log(\"The response time from server is \"+pm.response.responseTime+\" ms\");\r",
									"\r",
									"console.log(\"The response size received from server is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The response body received from server in JSON format is \");\r",
									"console.log(pm.response.json());        // print in json format\r",
									"\r",
									"console.log(\"The response body received from server in TEXT format is \");\r",
									"console.log(pm.response.text());        // print in text format\r",
									"\r",
									"console.log(\"The response headers received from server are \");\r",
									"console.log(pm.response.headers);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cToken}}"
							}
						],
						"url": "https://{{cURL}}/public/v2/users",
						"description": "This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database\n\n**Expected Result:**\n\n- Verify if response code received from server is 200 OK\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is received from server\n    \n- Verify if response body received from server is in JSON format\n    \n- Verify if response body contains fields such as id, name, email, gender, status"
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The data type for name field is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The data type for status field is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The data type for gender field is \"+typeof(pm.response.json().gender));\r",
									"console.log(\"The data type for email field is \"+typeof(pm.response.json().email));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"cName\", \"Kishore\");\r",
									"pm.collectionVariables.set(\"cGender\", \"male\");\r",
									"pm.collectionVariables.set(\"cStatus\", \"active\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{cName}}\",\r\n    \"gender\": \"{{cGender}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"{{cStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{cURL}}/public/v2/users",
						"description": "This is a REST API that uses HTTP method=POST and is used to create new user in the server/database\n\n**Expected Result:**\n\n- Verify if response code received from server is 201 Created\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is received from server\n    \n- Verify if response body received from server is in JSON format\n    \n- Verify if status is active or inactive\n    \n- Verify if gender is either male or female"
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name=Comcast-IT Company\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Comcast-IT Company\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if email=info3@comcast.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"info3@comcast.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=6921366\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(6921366);\r",
									"});\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(\"The HTTP method used in this request is \"+pm.request.method);\r",
									"console.log(\"The API URL used in this request is \"+pm.request.url);\r",
									"console.log(\"The payload used in this API request is \"+pm.request.body);\r",
									"console.log(\"The request size is \")\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request headers of this API are \");\r",
									"console.log(pm.request.headers);\r",
									"console.log(\"The API name is \"+pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Comcast-IT Company\",\r\n    \"email\": \"info3@comcast.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{cURL}}/public/v2/users/6930682",
						"description": "**Expected Result:**\n\n- Verify if response code received from server is 200 OK\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is received from server\n    \n- Verify if response body received from server is in JSON format\n    \n- Verify if response body contains fields such as id, name, email, gender, status"
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cToken}}"
							}
						],
						"url": "https://{{cURL}}/public/v2/users/6930801",
						"description": "This is a REST API that uses HTTP method=DELETE and is used to delete existing user details in the server/database.  \n**  \nExpected Result:**\n\n- Verify if response code received from server is 204 No Content\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is not received from server"
					},
					"response": []
				}
			],
			"description": "This folder consists of positive test cases"
		},
		{
			"name": "POSITIVE TC-GLOBAL VARIABLES",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"// CAPTURING RESPONSE ATTRIBUTES \r",
									"\r",
									"console.log(\"The response code is \"+pm.response.code);\r",
									"console.log(\"The response message is \"+pm.response.status);\r",
									"console.log(\"The response time from server is \"+pm.response.responseTime+\" ms\");\r",
									"\r",
									"console.log(\"The response size received from server is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The response body received from server in JSON format is \");\r",
									"console.log(pm.response.json());        // print in json format\r",
									"\r",
									"console.log(\"The response body received from server in TEXT format is \");\r",
									"console.log(pm.response.text());        // print in text format\r",
									"\r",
									"console.log(\"The response headers received from server are \");\r",
									"console.log(pm.response.headers);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gToken}}"
							}
						],
						"url": "https://gorest.co.in/{{gEndPoint}}",
						"description": "This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database\n\n**Expected Result:**\n\n- Verify if response code received from server is 200 OK\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is received from server\n    \n- Verify if response body received from server is in JSON format\n    \n- Verify if response body contains fields such as id, name, email, gender, status"
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The data type for name field is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The data type for status field is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The data type for gender field is \"+typeof(pm.response.json().gender));\r",
									"console.log(\"The data type for email field is \"+typeof(pm.response.json().email));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"gName\", \"Varshini\");\r",
									"pm.globals.set(\"gStatus\", \"active\");\r",
									"pm.globals.set(\"gGender\", \"female\");\r",
									"pm.globals.set(\"gEmail\", \"varshini@comcast.org\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{gName}}\",\r\n    \"gender\": \"{{gGender}}\",\r\n    \"email\": \"{{gEmail}}\",\r\n    \"status\": \"{{gStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://gorest.co.in/{{gEndPoint}}",
						"description": "This is a REST API that uses HTTP method=POST and is used to create new user in the server/database\n\n**Expected Result:**\n\n- Verify if response code received from server is 201 Created\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is received from server\n    \n- Verify if response body received from server is in JSON format\n    \n- Verify if status is active or inactive\n    \n- Verify if gender is either male or female"
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name=Comcast-IT Company\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Comcast-IT Company\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if email=info3@comcast.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"info3@comcast.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=6921366\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(6921366);\r",
									"});\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(\"The HTTP method used in this request is \"+pm.request.method);\r",
									"console.log(\"The API URL used in this request is \"+pm.request.url);\r",
									"console.log(\"The payload used in this API request is \"+pm.request.body);\r",
									"console.log(\"The request size is \")\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request headers of this API are \");\r",
									"console.log(pm.request.headers);\r",
									"console.log(\"The API name is \"+pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Comcast-IT Company\",\r\n    \"email\": \"info8@comcast.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://gorest.co.in/{{gEndPoint}}/6930583",
						"description": "**Expected Result:**\n\n- Verify if response code received from server is 200 OK\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is received from server\n    \n- Verify if response body received from server is in JSON format\n    \n- Verify if response body contains fields such as id, name, email, gender, status"
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gToken}}"
							}
						],
						"url": "https://gorest.co.in/{{gEndPoint}}/6930464",
						"description": "This is a REST API that uses HTTP method=DELETE and is used to delete existing user details in the server/database.  \n**  \nExpected Result:**\n\n- Verify if response code received from server is 204 No Content\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is not received from server"
					},
					"response": []
				}
			],
			"description": "This folder consists of positive test cases"
		},
		{
			"name": "POSITIVE TC-ENV VARIABLES",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"// CAPTURING RESPONSE ATTRIBUTES \r",
									"\r",
									"console.log(\"The response code is \"+pm.response.code);\r",
									"console.log(\"The response message is \"+pm.response.status);\r",
									"console.log(\"The response time from server is \"+pm.response.responseTime+\" ms\");\r",
									"\r",
									"console.log(\"The response size received from server is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The response body received from server in JSON format is \");\r",
									"console.log(pm.response.json());        // print in json format\r",
									"\r",
									"console.log(\"The response body received from server in TEXT format is \");\r",
									"console.log(pm.response.text());        // print in text format\r",
									"\r",
									"console.log(\"The response headers received from server are \");\r",
									"console.log(pm.response.headers);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gToken}}"
							}
						],
						"url": "{{envProtocol}}://{{envURL}}/public/v2/users",
						"description": "This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database\n\n**Expected Result:**\n\n- Verify if response code received from server is 200 OK\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is received from server\n    \n- Verify if response body received from server is in JSON format\n    \n- Verify if response body contains fields such as id, name, email, gender, status"
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The data type for name field is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The data type for status field is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The data type for gender field is \"+typeof(pm.response.json().gender));\r",
									"console.log(\"The data type for email field is \"+typeof(pm.response.json().email));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Comcast\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envProtocol}}://{{envURL}}/public/v2/users",
						"description": "This is a REST API that uses HTTP method=POST and is used to create new user in the server/database\n\n**Expected Result:**\n\n- Verify if response code received from server is 201 Created\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is received from server\n    \n- Verify if response body received from server is in JSON format\n    \n- Verify if status is active or inactive\n    \n- Verify if gender is either male or female"
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name=Comcast-IT Company\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Comcast-IT Company\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if email=info3@comcast.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"info3@comcast.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=6921366\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(6921366);\r",
									"});\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(\"The HTTP method used in this request is \"+pm.request.method);\r",
									"console.log(\"The API URL used in this request is \"+pm.request.url);\r",
									"console.log(\"The payload used in this API request is \"+pm.request.body);\r",
									"console.log(\"The request size is \")\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request headers of this API are \");\r",
									"console.log(pm.request.headers);\r",
									"console.log(\"The API name is \"+pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Comcast-IT Company\",\r\n    \"email\": \"info3aa@comcast.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envProtocol}}://{{envURL}}/public/v2/users/6930806",
						"description": "**Expected Result:**\n\n- Verify if response code received from server is 200 OK\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is received from server\n    \n- Verify if response body received from server is in JSON format\n    \n- Verify if response body contains fields such as id, name, email, gender, status"
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gToken}}"
							}
						],
						"url": "{{envProtocol}}://{{envURL}}/public/v2/users/6930682",
						"description": "This is a REST API that uses HTTP method=DELETE and is used to delete existing user details in the server/database.  \n**  \nExpected Result:**\n\n- Verify if response code received from server is 204 No Content\n    \n- Verify if response time from server < 5 seconds\n    \n- Verify if response body is not received from server"
					},
					"response": []
				}
			],
			"description": "This folder consists of positive test cases"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "cToken",
			"value": "a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29",
			"type": "string"
		},
		{
			"key": "cURL",
			"value": "gorest.co.in"
		},
		{
			"key": "cName",
			"value": ""
		},
		{
			"key": "cGender",
			"value": ""
		},
		{
			"key": "cStatus",
			"value": ""
		},
		{
			"key": "gToken",
			"value": "bc676b7e412819f3fca46a324aca5164e22a69ccbd3347e2dad6f856eb53303f"
		}
	]
}